{"searchDocs":[{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_blog_post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_blog_post#create-your-first-post","content":" Create a file at blog/2021-02-28-greetings.md:  blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much as you like.   A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/congratulations","content":"","keywords":"","version":"Next"},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/nr-pies/docs/docusaurus/tutorial_basics/congratulations#whats-next","content":" Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community ","version":"Next","tagName":"h2"},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/nr-pies/docs/docusaurus/intro#getting-started","content":" Get started by creating a new site.  Or try Docusaurus immediately with docusaurus.new.  ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/nr-pies/docs/docusaurus/intro#what-youll-need","content":" Node.js version 18.0 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies.  ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/nr-pies/docs/docusaurus/intro#generate-a-new-site","content":" Generate a new Docusaurus site using the classic template.  The classic template will automatically be added to your project after you run the command:  npm init docusaurus@latest my-website classic   You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor.  The command also installs all necessary dependencies you need to run Docusaurus.  ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/nr-pies/docs/docusaurus/intro#start-your-site","content":" Run the development server:  cd my-website npm run start   The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there.  The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/.  Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_page","content":"","keywords":"","version":"Next"},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_page#create-your-first-react-page","content":" Create a file at src/pages/my-react-page.js:  src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }   A new page is now available at http://localhost:3000/my-react-page.  ","version":"Next","tagName":"h2"},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_page#create-your-first-markdown-page","content":" Create a file at src/pages/my-markdown-page.md:  src/pages/my-markdown-page.md # My Markdown page This is a Markdown page   A new page is now available at http://localhost:3000/my-markdown-page. ","version":"Next","tagName":"h2"},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_document","content":"","keywords":"","version":"Next"},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_document#create-your-first-doc","content":" Create a Markdown file at docs/hello.md:  docs/hello.md # Hello This is my **first Docusaurus document**!   A new document is now available at http://localhost:3000/docs/hello.  ","version":"Next","tagName":"h2"},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/nr-pies/docs/docusaurus/tutorial_basics/create_a_document#configure-the-sidebar","content":" Docusaurus automatically creates a sidebar from the docs folder.  Add metadata to customize the sidebar label and position:  docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!   It is also possible to create your sidebar explicitly in sidebars.js:  sidebars.js export default { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial_basics/create-a-document'] } ] };  ","version":"Next","tagName":"h2"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/deploy_your_site","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/nr-pies/docs/docusaurus/tutorial_basics/deploy_your_site#build-your-site","content":" Build your site for production:  npm run build   The static files are generated in the build folder.  ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/nr-pies/docs/docusaurus/tutorial_basics/deploy_your_site#deploy-your-site-1","content":" Test your production build locally:  npm run serve   The build folder is now served at http://localhost:3000/.  You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_extras/manage_docs_versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/nr-pies/docs/docusaurus/tutorial_extras/manage_docs_versions#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/nr-pies/docs/docusaurus/tutorial_extras/manage_docs_versions#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: &quot;docsVersionDropdown&quot;, }, ], }, }, };   The docs version dropdown appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/nr-pies/docs/docusaurus/tutorial_extras/manage_docs_versions#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/nr-pies/docs/intro/getting_started","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Getting Started","url":"/nr-pies/docs/intro/getting_started#purpose","content":" Permitting is a complex space. B.C.'s Natural Resource Sector (NRS) alone has well over 600 permit types with just as many ways to collect, process and store information from intake to decision. Analytics and reporting and permitting reform is difficult for many reasons including data quality and inconsistencies with collection. Permitting systems can't integrate without a common language.  This standard specifies the foundational set of core descriptive data types and elements required to enable the compatibility and interoperability of Natural Resource permitting and authorization ecosystems, as well as define the purpose and characteristics of permitting. It will enable better business intelligence (ie. providing evidence for policy shifts) and permitting process improvements while enabling flexibility to adapt to shifts in direction on permitting.  ","version":"Next","tagName":"h2"},{"title":"Objectives​","type":1,"pageTitle":"Getting Started","url":"/nr-pies/docs/intro/getting_started#objectives","content":" The main objective of PIES is to deliver a published specification to enable better data quality and system interoperability. Understand the time, cost, and effort involved in requiring a mandatory data standard be included or usable in all NRM permitting systems to enhance data consistency, improve interoperability, and automate processes across the sector.  Make it easier to connect and work with the information in different permitting systems. Reduce the effort and cost of systems integrations and automation.Unlock the ability to provide consistent progress tracking to proponents. Create technical guidelines that help various systems communicate smoothly and consistently.Support different ways for systems to communicate with each other.Unlock potential for evidence-based policy and transformative potential of AI.  ","version":"Next","tagName":"h2"},{"title":"Getting Everyone on the Same Page​","type":1,"pageTitle":"Getting Started","url":"/nr-pies/docs/intro/getting_started#getting-everyone-on-the-same-page","content":" Set up a working group for people interested to contribute and adopt PIES. See MS Teams.Create clear rules for data governance.Develop a common language so everyone understands the same terms.Gather feedback to ensure data is represented accurately and clearly.  ","version":"Next","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Getting Started","url":"/nr-pies/docs/intro/getting_started#documentation","content":" Share best practices for documenting government data standards.Identify and list common permitting concepts and data types.Create a plan for implementing solutions using transformations and microservices.  And of course, PIES are delicious! 😄  ","version":"Next","tagName":"h3"},{"title":"Goals​","type":1,"pageTitle":"Getting Started","url":"/nr-pies/docs/intro/getting_started#goals","content":" Enable a cross sector view Through appropriate data accessCreates a single point of validated reporting Provide a harmonized view to perform analysis to identify gaps, gain insights and to spot opportunities for improvement Data qualityData and information consistencyIdentify processing timesData harmonization cross sector level reportingActivity bundling and linkingCoordinated First Nations Consultation  Ultimately PIES goal is to achieve consistency in reporting and analytics across various permitting systems AND to achieve interoperability (the ability for the systems to understand the key elements of information they need to share and talk to each other in a common language).  An Interoperability strategy and technology will be developed separately from the Data Standards. The strategy will focus on a stable, maintainable, scalable platform for data interchange with ability to transform data from LOB systems into the data standards. ","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };   ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site#translate-a-doc","content":" Copy the docs/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  caution In development, you can only use one locale at a time.  ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };   The locale dropdown now appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/nr-pies/docs/docusaurus/tutorial_extras/translate_your_site#build-your-localized-site","content":" Build your site for a specific locale:  npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"Next","tagName":"h2"},{"title":"Terminology 🚧","type":0,"sectionRef":"#","url":"/nr-pies/docs/intro/terminology","content":"","keywords":"","version":"Next"},{"title":"Acronyms​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#acronyms","content":" Term\tDefinitionLOB\tLine of Business  ","version":"Next","tagName":"h2"},{"title":"Concepts​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#concepts","content":" The following terms outline the main concepts used within this specification and aim to provide a common lexicon for understanding and terminology usage.  ","version":"Next","tagName":"h2"},{"title":"Actors​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#actors","content":" This section discusses the various roles that a person, group or an organization may act as within the context of PIES.  Term\tDefinitionApplicant\tA person, group or organization seeking an authorization to perform a set of actions. Decision Maker\tA statutory decision maker (SDM) are the persons with designated authority by their respective Ministry legislation to issue authorizations, approvals, and similar decisions. Facilitator\tAn established role which focuses on delivering dedicated support to applicants on application submissions. Interested Party\tA person, or group which may be impacted by an authorization decision. Local Government\tA Municipality or Regional District within the Province. They are the entity providing development, use and building approval on a parcel within their jurisdiction. Navigator\tA synonym for a facilitator. Proponent\tA synonym for an applicant. Referral Agency\tA provincial Ministry, local government, or government agency that receives notices for an application. They may be given the opportunity to provide input and comments on an application. Subject Matter Expert\tA subject matter expert (SME) is a specialist of a specific domain, such as authorization processes, software, and policy.  ","version":"Next","tagName":"h3"},{"title":"Definitions​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#definitions","content":" This section outlines the definitions and common vocabulary used for representing specific concepts within PIES.  Term\tDefinition\t???Action\tA regulated action is a specific defined piece of work that may be bounded by an Area of Interest as defined by a referral agency. Activity\tA specific task that may be a part of a larger ongoing or routine process. It is defined by a set of one or more regulated actions within an area of interest as defined by a referral agency. An activity may require one or more authorizations. Activity Bundling\tThe act of identifying the set of permits required for a certain activity.\tThis should be refined, not sure if this should belong here as it's not a formal process but a description of a relationship Application\tA submitted form(s) with the intent to obtain or amend an authorization.\tThis might be getting muddled with the concept of a project. Area of Interest\tA defined location where an action is to be performed. It may be specified by Coordinates, GeoJSON, or by Parcels.\tAddresses may potentially be usable. Authorization\tThe act of granting permission to perform a specific action in a parcel within the Province of BC. Authorizations may take various forms, including a permit, license, tenure, lease, right-of-way, agreement, grant, statutory right, interest or title.\tWe might need to expand this definition over time as this is the formal umbrella term for many things. Caseload\tWork happening with the LOB to facilitate, capture and maintain a permit. Disposition\tThe final decision or outcome made by a statutory decision maker regarding an application. It essentially indicates what action has been taken with respect to the application, and can be represented by a state.\tFirst attempt at defining - needs review License\tA formal authorization permission to engage in a particular action, often for commercial purposes. Licenses are usually granted for a set duration and can be subject to conditions, fees, and regulations. Parcel\tA polygon representation of a designated area, location or jurisdiction. Parcels may have varying degrees of accuracy which may or may not come from surveyor submissions.\tRephrased from LTSA page Permit\tA temporary, conditional authorization granting permission for a specific action within a defined period. It outlines the scope, requirements, and limitations of the action and may be subject to renewal or revocation.\tIn permitting modernization, the term broadly refers to various types of authorization. Project\tA temporary, goal-oriented effort designed to achieve a particular outcome within a defined timeframe and scope. It is defined by a set of one or more regulated actions within an area of interest as defined by a referral agency. A project may require one or more authorizations. Submission\tThe completed output of a single form as answered by an applicant.\tAdd a note like &quot;Submissions require an adjective declaring their application context&quot;? System\tA collection of interconnected software and/or hardware components that supports business operations. Permitting systems will typically facilitate the application process for a specific authorization. Tenure\tA long-term, often transferable authorization for the right to use, occupy, or control land or resources. It establishes a legal claim to land or resources, often with conditions on usage and maintenance. Workload\tA quantifiable measurement of the number of client-driven applications in the queue.\t  The following diagram outlines a high level relational map between all the actors (with rounded borders) and how they interact with specific parts of the process.    ","version":"Next","tagName":"h3"},{"title":"Process Tracking​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#process-tracking","content":" This section outlines the definitions and common vocabulary used for representing specific concepts within a process.  Term\tDefinitionLifecycle\tRepresents the complete ordered sequencing of phases that an application and an authorization may pass through. A lifecycle should describe the entire scope of processing that can occur from beginning to end. Phase\tA distinct period or division within a lifecycle. A phase will represent a broader set of stages and usually comes with specific objectives or outcomes. A phase shall be a defined member of a specific lifecycle. Stage\tA discrete, ordered set or collection of states. A stage defines a sequential order of states that the process must go through. A stage shall be a defined member of a phase. State\tA description of the current condition of an application or authorization within the larger process or workflow (e.g., &quot;Submitted&quot;, &quot;Approved&quot;). A state shall map to a broader stage definition. Status\tA description of the current condition or update of an application or authorization. Additional details about the current state are frequently conveyed (e.g., &quot;Pending Review&quot;, &quot;Under Inspection&quot;). Statuses may be defined by the line of business. All defined statuses shall have a concept mapping to a broader state definition or above.  The following diagram outlines a high level categorization map between all of the process terms and how they relate to each other.    ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Terminology 🚧","url":"/nr-pies/docs/intro/terminology#structure","content":" The following terms describe the structural definitions of the specification ordered from specific to general.  Term\tDefinitionData Type\tA primitive data type is one of the most fundamental principles for defining what type of information a piece of data is. Common data types are: boolean, integer, string, and date. Identifiers\tIdentifiers provide a shorthand way to reference a unit of data or a specific entry in a codelist or classification scheme. Typically identifiers are intended to be unique within a local or global context (UIDs, and UUIDs). This can include both UUIDs intended to serve as their own widely used standards as well as commonly used code lists and classification schemes. For example, &quot;CA&quot; is the ISO 3166-1 alpha-2 code for Canada while 515112 is the North American Industry Classification System (NAICS) code for FM radio stations. Vocabulary\tA vocabulary establishes standardized terms with consistent semantic definitions. These are typically constrained to a particular namespace or domain. The terms are the machine readable labels for individual data elements or a group of data elements. They can be thought of as the column headings in a spreadsheet of tabular data along with their definitions in a data dictionary. For example, the Dublin Core Metadata Initiative establishes a term and definition for a variety of common metadata elements like &quot;publisher.&quot; Schema\tA schema can be a data model or database schema defining relationships between different pieces of information. Schemas can be described using SQL, UML, XSD, or JSON Schema. Format\tThe format or &quot;serialization format&quot; is the syntax, encoding, and file format or media type for storing or transmitting your data. On the web, formats are associated with standardized media type identifiers, like application/json. Common data formats include JSON, CSV, and XML. API\tAn application programming interface (API) is a predefined protocol for reading and/or writing data using a filesystem, a database, or across a network. Common types of data APIs include OBDC and SQL for databases and REST APIs for the web. ","version":"Next","tagName":"h2"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/nr-pies/docs/intro/welcome","content":"Welcome Welcome! This site repository contains common schemas related to permitting in the Natural Resources Sector for the Province of British Columbia. The intent of these are to standardize the way permitting in the Natural Resource Sector is described as data to enable quality and interoperability. Hosting this specification in the open will encourage collaboration, adoption and enable versioning. These will be reviewed and updated with relevant partners, data custodians, stewards and sector permitting teams. You can dive into the specification here. 📄️ Welcome Welcome to the Natural Resource Sector PIES 📄️ Getting Started Introduction to the Natural Resource Sector PIES 📄️ Terminology 🚧 The definitions of specific technical terms and concepts used in PIES","keywords":"","version":"Next"},{"title":"Process Tracking 🚧","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/concept/process_tracking","content":"","keywords":"","version":"Next"},{"title":"Classifications​","type":1,"pageTitle":"Process Tracking 🚧","url":"/nr-pies/docs/spec/concept/process_tracking#classifications","content":" Refer to the Process Tracking Terminology to understand the definitions behind each classification level.  ","version":"Next","tagName":"h2"},{"title":"Concept Map​","type":1,"pageTitle":"Process Tracking 🚧","url":"/nr-pies/docs/spec/concept/process_tracking#concept-map","content":"     ","version":"Next","tagName":"h2"},{"title":"Code Sets​","type":1,"pageTitle":"Process Tracking 🚧","url":"/nr-pies/docs/spec/concept/process_tracking#code-sets","content":" Each classification within the context of a specific kind of lifecycle will have a codified and enumerated concept. TBD.  ","version":"Next","tagName":"h2"},{"title":"Type Descriptors​","type":1,"pageTitle":"Process Tracking 🚧","url":"/nr-pies/docs/spec/concept/process_tracking#type-descriptors","content":" Each kind of lifecycle may be described by a type descriptor. For example, an application may be an amendment type, or it may be a transfer type. TBD ","version":"Next","tagName":"h2"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#front-matter","content":" Markdown documents have metadata at the top called Front Matter:  my-doc.md --- id: my_doc_id title: My document title description: My document description slug: /my-custom-url tags: - developer --- ## Markdown heading Markdown text with [links](./hello.md)   We recommend that all markdown pages should have at minimum a title, description and tags array defined. An idmay be specified, but can be derived off of the filename when omitted.  info A complete listing of Docusaurus supported front matter fields can be found here.  ","version":"Next","tagName":"h2"},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#links","content":" Regular Markdown links are supported, using url paths or relative file paths.  Let's see how to [Create a page](/create_a_page).   Let's see how to [Create a page](./create_a_page.md).   Result: Let's see how to Create a page.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#images","content":" Regular Markdown images are supported.  You can use absolute paths to reference images in the static directory (static/img/docusaurus.png):  ![Docusaurus logo](/img/docusaurus.png)     You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them:  ![Docusaurus logo](./img/docusaurus.png)   ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#code-blocks","content":" Markdown code blocks are supported with Syntax highlighting.  ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; } ```   src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }   ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#admonitions","content":" Docusaurus has a special syntax to create admonitions and callouts:  :::tip[My tip] Use this awesome feature option ::: :::danger[Take care] This action is dangerous :::   My tip Use this awesome feature option  Take care This action is dangerous  ","version":"Next","tagName":"h2"},{"title":"Mermaid Graphs​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#mermaid-graphs","content":" Our Docusaurus instance supports diagramming and charting through Mermaid. The following are some quick examples that can be achieved using Mermaid. For more details on the wide range of charts supported, visit their documentation for more details under the Diagram Syntax section on the sidebar.  ","version":"Next","tagName":"h2"},{"title":"State Machine​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#state-machine","content":" ```mermaid graph TD A--&gt;B A--&gt;C B--&gt;D C--&gt;D ```     ","version":"Next","tagName":"h3"},{"title":"Flowchart​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#flowchart","content":" ```mermaid graph LR A[PIES] --&gt;|Get spec| B(Stakeholder approval) B --&gt; C{Purpose} B --&gt; G[/Further Analysis/] C ==&gt;|One| D[Document Exchange] C --&gt;|Two| E[Event Alerts] C --&gt;|Three| F[Aggregation] subgraph identification A B end subgraph execution C D E F G end ```     ","version":"Next","tagName":"h3"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/nr-pies/docs/docusaurus/tutorial_basics/markdown_features#mdx-and-react-components","content":" MDX can make your documentation more interactive and allows using any React components inside Markdown:  export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !     This is Docusaurus green !  This is Facebook blue ! ","version":"Next","tagName":"h2"},{"title":"Code 🔬","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/code","content":"","keywords":"","version":"Next"},{"title":"Structure​","type":1,"pageTitle":"Code 🔬","url":"/nr-pies/docs/spec/data/code#structure","content":" Attribute\tValue\tDescription &amp; ConstraintsType\tstring\tShall be represented in UTF-8 format, as specified in RFC 3629, which is an extension of the ISO 10646-1 standard. Regex Pattern\t^[^\\s]+( [^\\s]+)*$\tString which has at least one character and no leading or trailing whitespace, and where there is no whitespace other than single spaces in the contents.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Code 🔬","url":"/nr-pies/docs/spec/data/code#specification","content":" SchemaSource Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Code 🔬","url":"/nr-pies/docs/spec/data/code#implementation-notes","content":" This data structure is mainly meant to illustrate and restrict what is allowed to be encoded for an arbitrary code value. This is meant to only be used as a semantic reference point. This data structure is loosely inspired by theFHIR Code Type.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Code 🔬","url":"/nr-pies/docs/spec/data/code#references","content":" FHIR Code Type ","version":"Next","tagName":"h2"},{"title":"Primitive Types","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/primitive_types","content":"","keywords":"","version":"Next"},{"title":"String​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#string","content":" Strings are used to represent textual information. For most scenarios, strings shall be represented in UTF-8 format, as specified in RFC 3629, which is an extension of the ISO 10646-1standard.  Strings may be optionally constrained by properties such as minLength, maxLength and by Regular Expressionpattern. In addition, there are commonbuilt-in format types that a string may represent. While we outline some of the common formats here, please refer to the JSON Schema documentation for more detail on the available built-in format types.  ","version":"Next","tagName":"h2"},{"title":"Date and Time​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#date-and-time","content":" Date and/or time formats shall be represented inRFC 3339, section 5.6 format, also commonly known asISO 8601. Unless otherwise specified, date-time shall be internally stored and represented in a format compatible with unix/epochtime.  If the time is specified, such as when either the time or date-time formats are used, the time representations shall be encoded in UTC time. Reference theJSON Schema documentation for more specific examples.  warning Note that the duration format is not supported at this time as we are compliant with draft 07 of the JSON Schema standard.  ","version":"Next","tagName":"h3"},{"title":"Email​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#email","content":" Email addresses with format email shall be represented inRFC 5321, section 4.1.2 format. Emails may also be conveyed in internationalized format idn-email which will be compliant toRFC 6531. Reference theJSON Schema documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Hostname​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#hostname","content":" Hostnames with format hostname shall be represented inRFC 1123, section 2.1 format. Hostnames may also be conveyed in internationalized format idn-hostname which will be compliant toRFC 5890, section 2.3.2.3. Reference theJSON Schema documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"IP Address​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#ip-address","content":" IP Addresses may either be formatted in ipv4 or ipv6 formats. If IPv4 is used, it shall comply withRFC 2673, section 3.2. If IPv6 is used, it shall comply with RFC 2373, section 2.2. Reference theJSON Schema documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Resource Identifier​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#resource-identifier","content":" Universal resource identifiers will use format uri and comply withRFC 3986. There are other less commonly used formats described in theJSON Schema documentation.  warning Note that the uuid format is not supported at this time as we are compliant with draft 07 of the JSON Schema standard. Instead, uuid strings shall be constrained with the equivalent uuid versioned regular expression pattern. For most cases, uuid v4 will be used. When a uuid is used, it shall comply withRFC 4122. The regular expression to be used when specifying uuids will be /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i in order to remain version agnostic and maximize compatibility. info While there is RFC 9562 which extends RFC 4122 by adding in uuid versions 6-8, these are likely not supportable with the uuid format yet and will require further review if and when these newer uuid versions are used.  ","version":"Next","tagName":"h3"},{"title":"URI Template​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#uri-template","content":" URI Templates with format uri-template provide a way to specify a Unique Resource Identifier that contains parameters that must be substituted in before the URI may be resolved. This should comply withRFC 6570. Check theJSON Schema documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Regular Expression​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#regular-expression","content":" Regular expressions with format regex should comply with theECMA 262 dialect. Check theJSON Schema documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Numeric​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#numeric","content":" Decimals or floating-point numbers may be represented as a type of numeric value. Note that JSON lacks the ability to differentiate between integers and floating-point values. It is not possible to reliably infer if the value is an integer or floating-point value solely based on the presence of a decimal point. As such, we recommend using a numbertype in lieu of the integer type for most scenarios that do not require integer level precision.  Numbers and integers may be optionally constrained by properties such as multipleOf, minimum, maximum,exclusiveMinimum and exclusiveMaximum. Reference theJSON Schema documentation for more specific examples.  ","version":"Next","tagName":"h2"},{"title":"Object​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#object","content":" Objects are used for unordered key-value mappings. In JSON, the key shall always be a string, and a key-value pair is conventionally called a &quot;property&quot;. As objects can have various requirements, nestings, and structuring, there is extensive documentation outlining how objects can constrain the key namings, define the required and/or expected properties, as well as define relationships and inclusion of other schemas into its own definition.  More specific details on what can be done can be found in theJSON Schema documentation.  ","version":"Next","tagName":"h2"},{"title":"Array​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#array","content":" Arrays are used to represent ordered elements. JSON permits array elements to consist of different types. As such, array definitions may either constrain the type of elements with the items keyword, or use the contains keyword to provide a looser expectation of what kinds of elements are expected.  Other array constraints such as uniqueness, minContains, maxContains, minItems and maxItems may also be used to describe the boundaries of the array. Reference theJSON Schema documentation for more specific examples.  ","version":"Next","tagName":"h2"},{"title":"Boolean​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#boolean","content":" Booleans are used to represent only two possible values: true or false. While certain languages may evaluate other values to true or false, they are not accepted by JSON Schema. Ensure that booleans are evaluated and casted first prior to encoding. Reference theJSON Schema documentation for more details.  ","version":"Next","tagName":"h2"},{"title":"Null​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#null","content":" Null is used to represent no value, and can only have a single acceptable value null. Note that null does not equate to the absence of a value, or undefined. Reference theJSON Schema documentation for more details.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#references","content":" ","version":"Next","tagName":"h2"},{"title":"Government Standards​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#government-standards","content":" Address Data Standards: Mailing, Delivery and ResidentialDate and Time StandardB.C. Health Information Standards for Date and TimeNaming and Describing  ","version":"Next","tagName":"h3"},{"title":"Technical Standards​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#technical-standards","content":" ECMA 262JSON Schema TypesRFC 1123 (Internet Hosts)RFC 2373 (IPv6)RFC 2673 (IPv4)RFC 3339 (Date and Time)RFC 3629 (UTF-8)RFC 3986 (URI)RFC 4122 (UUID v1-5)RFC 5321 (Email/SMTP)RFC 5890 (Internationalized Domain Names)RFC 6531 (Internationalized Email)RFC 6570 (URI Template)RFC 8259 (JSON)RFC 9562 (UUID v6-8)  ","version":"Next","tagName":"h3"},{"title":"Errata​","type":1,"pageTitle":"Primitive Types","url":"/nr-pies/docs/spec/data/primitive_types#errata","content":" JSON Schema Version Comparison ","version":"Next","tagName":"h3"},{"title":"Event 🔬","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/event","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#scope","content":" This data type is intended to represent the raw known factual information a specific temporal event. The interpretation and context of an event will be dependent on which resource type is using it.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#structure","content":" An Event shall always contain some start_* attribute. A valid Event shall at minimum contain either a start_date or a start_datetime. An Event shall be defined using either date or date-time specificity. Mixed usage of date and date-time is prohibitedIf start_date is defined, an optional end_date may be specified.If start_datetime is defined, an optional end_datetime may be specified.  Name\tCardinality\tType\tDescription &amp; Constraintsstart_date\t0..1\tstring\tThe start date of the event in YYYY-MM-DD format. start_datetime\t0..1\tstring\tThe start datetime of the event in ISO 8601 format (e.g., 2024-12-01T10:00:00Z). end_date\t0..1\tstring\tThe end date of the event in YYYY-MM-DD format. This is optional if start_date is used. end_datetime\t0..1\tstring\tThe end datetime of the event in ISO 8601 format. This is optional if start_datetime is used.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#specification","content":" SchemaSourceExamples Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#implementation-notes","content":" ","version":"Next","tagName":"h2"},{"title":"Date vs DateTime Specificity​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#date-vs-datetime-specificity","content":" The Event data type supports either Date or DateTime specificity. When choosing which specificity to transmit an Event, consider the intent of the transmission, and whether the time component would aid in providing meaningful context to the conveyed information. We offer the following guidance:  Reporting normally uses day resolution. If you know your message is intended to be used for reporting purposes, use the date format over date-time.System logging and auditing uses should lean towards using the date-time format if the time component is available.When the usage intent is unknown and the time component is available, use the date-time format as it will contain a higher degree of information fidelity.  ","version":"Next","tagName":"h3"},{"title":"Transformation Specificity​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#transformation-specificity","content":" Conversion and inference between the date and date-time formats can be tricky as it is not possible to do a lossless bidirectional transformation between the two formats (i.e. if you drop the time from date-time, you will have a hard time getting the time value back).  When converting from date-time to date, the transformation shall account for the timezone offset. As all dates are recorded in UTC time, it is not sufficient to simply truncate the time portion.Use the local time of the system where it is operating at as a frame of reference.For most situations, anticipate using either Pacific Daylight Time (PDT) or Pacific Standard Time (PST). We advise against converting from date to date-time as assumptions for the time component would be necessary.  ","version":"Next","tagName":"h3"},{"title":"Ongoing Events​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#ongoing-events","content":" The Event data type only supports representing a specific moment with just a start, or a finite duration with a start and an end. Event does not support conveying an ongoing event (e.g. there exists a start date, but no end date is provided because it is still current or ongoing). This is because the message specification needs to support asynchronous communication workloads; it may be possible for an ongoing event to no longer hold true by the time the message has been parsed by the recipient system.  While inferences may be made about values that only have the start defined, they should not be interpreted when handling their values, and should instead be used &quot;at face value&quot; to describe only the specific moment when a start occurs.  ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"Event 🔬","url":"/nr-pies/docs/spec/data/event#references","content":" ISO 8601RFC 3339Unix / Epoch Time ","version":"Next","tagName":"h2"},{"title":"Header 📝","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/header","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Header 📝","url":"/nr-pies/docs/spec/data/header#scope","content":" This data type is intended to define all expected attributes that a message datatype must contain at minimum. This data structure is not intended for standalone use.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Header 📝","url":"/nr-pies/docs/spec/data/header#structure","content":" Name\tCardinality\tType\tDescription &amp; Constraintstx_id\t1..1\tstring\tA unique UUIDv7 assigned for this specific message. version\t1..1\tstring\tThe PIES specification version this message complies to. Value shall be a valid semantic version formatted string. kind\t1..1\tstring\tThe specific kind of PIES message data type this message represents. system_id\t1..*\tstring | string[]\tA valid URI or set of URIs that identifies the source system, service or asset that the data comes from. This is typically a string; however an array of unordered URIs can be used to indicate that multiple systems were used to compile the data in this message. This URI should point to an authoritative asset tracking system or equivalent. However, the URI does not need to be machine readable. record_id\t1..1\tstring\tThe record or primary key representing what the data this message is directly associated to. record_kind\t1..1\tstring\tThe kind of record the source system stores this record as (i.e. Permit, Project, Submission or Tracking).  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Header 📝","url":"/nr-pies/docs/spec/data/header#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Header 📝","url":"/nr-pies/docs/spec/data/header#implementation-notes","content":" All header attributes are mandatory. A valid PIES message datagram must define all of the header attributes.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Header 📝","url":"/nr-pies/docs/spec/data/header#references","content":" Guidelines ","version":"Next","tagName":"h2"},{"title":"Process 🔬","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/process","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Process 🔬","url":"/nr-pies/docs/spec/data/process#scope","content":" This data type is intended to represent the core concept of a defined process.  Loosely taking inspiration from HL7 Timing.  ","version":"Next","tagName":"h2"},{"title":"Parcel Identifier 📝","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/parcel_id","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#scope","content":" Parcel ID is the Land Title Register parcel identifier, a nine-digit max number that uniquely identifies a parcel in the land title register of in British Columbia. The registrar assigns PID numbers to parcels for which a title is being entered as a registered title. The Land Title Act refers to the PID as the permanent parcel identifier.  The parcel identification number (PIN) is the Crown Land Registry Parcel Identifier.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#structure","content":" A valid Parcel Identifier shall at minimum contain either a pin or at least one pid.A Parcel Identifier may contain a legal_description and/or a parcel_name.  Name\tCardinality\tType\tDescription &amp; Constraintslegal_description\t0..1\tstring\tThe full legal description of the parcel and is primarily recorded from the Land Title Register. Where recorded only in the Crown Land Registry, this attribute is to be populated from Tantalis for the fabric compilation, but maintained by PMBC during on-going operations. parcel_name\t0..1\tstring\tThe same as the PID, if there is one. If there is a PIN but no PID, then parcel name is the PIN. If there is no PID nor PIN, then it is the parcel class value, e.g., COMMON OWNERSHIP, BUILDING STRATA, AIR SPACE, ROAD, PARK. pid\t0..*\tinteger\tParcel ID is the Land Title Register parcel identifier, a nine-digit number that uniquely identifies a parcel in the land title register of in British Columbia. The registrar assigns PID numbers to parcels for which a title is being entered as a registered title. The Land Title Act refers to the PID as the permanent parcel identifier. pin\t0..1\tinteger\tThe parcel identification number (PIN) is the Crown Land Registry Parcel Identifier.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#implementation-notes","content":" ","version":"Next","tagName":"h2"},{"title":"Parcel ID (PID)​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#parcel-id-pid","content":" Parcel IDs are stored as numeric values from ParcelMap BC (PMBC). During the PMBC adoption in government, business areas voiced that PIDs may be store the presentation format which includes padded zeros and/or dashes. The BC Data Service distributes PMBC data on behalf of the provincial government (see BC Data Catalogue) and makes the Parcel IDs formats available to accommodate this. The following formats may be encountered which includes padded zeros and/or dashes:  parcel_id_formatted (string, 12): The parcel ID formatted as a left-zero-padded nine-digit number, with dashes between each group of three digits.parcel_id_number (numeric, 10): The Parcel ID as a number, without leading zeroes.  Should these alternatives be encountered, they must be transformed into a standard JSON integer primitive type.  ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"Parcel Identifier 📝","url":"/nr-pies/docs/spec/data/parcel_id#references","content":" BC Data CatalogueParcelMap BC - Parcels ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Process 🔬","url":"/nr-pies/docs/spec/data/process#structure","content":" A Process shall always contain a class and concept attribute. The class ordered set shall have at least one concept, and no more than four concepts defined. Classes do not require the full path hierarchy defined depending on what the intention of the concept being shared. A Process may contain a status attribute. The status attribute acts as a free text field which represents the specific status value that may be stored or encoded in the transmitting system.If status is defined, the description and status_code attributes may optionally be defined as well. The recipient system shall primarily rely on the class and concept attributes. Recipient systems may choose to parse the status, description and status_code attributes as auxiliary or supplementary data.Recipient systems shall not depend on these attributes as they are not guaranteed to exist, nor do they convey the standard concept hierarchy as defined by this specification.  Name\tCardinality\tType\tDescription &amp; Constraintsclass\t1..*\tstring[]\tAn ordered set of process tracking terms. concept\t1..1\tstring\tA URI reference to the concept map encodings used. description\t0..1\tstring\tAn optional description of the status if present. status\t0..1\tstring\tAn optional description of the current condition or update of an application or authorization. Additional details about the current state are frequently conveyed (e.g., 'Pending Review', 'Under Inspection'). Statuses may be defined by the line of business. status_code\t0..1\tCode\tAn optional codified representation of the status attribute. Status codes may be defined by the line of business.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Process 🔬","url":"/nr-pies/docs/spec/data/process#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Process 🔬","url":"/nr-pies/docs/spec/data/process#implementation-notes","content":" The core of the process type is the representation of one of the paths in theProcess Tracking Concept Map. This is represented in the class attribute as an ordered tuple. Each entry in the ordered set represents a specific detail level in the hierarchy. For example, the array value of [&quot;Application&quot;, &quot;Review&quot;, &quot;Assessment&quot;] would indicate that the process concept being conveyed is representing theAssessment Stage within the Review Phase of an Application Lifecycle.  The class array may be populated with fewer elements in situations where the concept being mapped represents a higher level concept. For example, if the class attribute only contains the array value of [&quot;Application&quot;, &quot;Review&quot;], that means that only the Review Phase of an Application Lifecycle is represented; the more detailed Stage concept is not encoded. Systems reading the class attribute may extract a subset of the transmitted ordered array for processing since the lower level concepts map to higher level concepts in the concept map.  The concept attribute is a static URI reference to the documentation for the current concept map being used. This URI is not intended to be machine readable as it is designed to act as a signal for human readers to see and understand the context of which terminologies and concepts are being conveyed.  The status attribute is optional, but is designed to be an explicit &quot;escape hatch&quot; for specific lines of business to share their most detailed system concepts, should they choose to do so. Statuses declared here will be implicitly mapped under the declared class ordered tuple. If a status is defined, the description and status_codeattributes may also be defined in order to assist with clarifying the status value.  Recipient systems may look at status, status_code and description as a reference point. However, the core intent of this data type is to ensure that the core class attribute to be the main source of truth when handling and interpreting the data for processing. Recipient systems SHOULD NOT depend on either status, status_code ordescription attributes when parsing and interpreting the process concept.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Process 🔬","url":"/nr-pies/docs/spec/data/process#references","content":" CodeProcess Tracking Concept Map ","version":"Next","tagName":"h2"},{"title":"Guidelines 📝","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/message/guidelines","content":"","keywords":"","version":"Next"},{"title":"Identification Headers​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#identification-headers","content":" Every PIES message must include the three main types of identification: Transaction, System, and Record. All three of these identifiers work together to ensure that the message can be correctly identified and processed. These identifiers must be included as a part of the JSON payload transmission.  ","version":"Next","tagName":"h2"},{"title":"Transaction Identification​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#transaction-identification","content":" Each PIES transaction must be uniquely identifiable. This requires a timestamp of some kind, a unique identifier, and a declaration of the PIES version.  Timestamps and Uniqueness​  The PIES standard uses UUIDv7, as specified inRFC 9562, section 5.7, to address timestamping and uniqueness. The first 48 bits of the UUID is used for the timestamp, while the rest of the bits are used for UUID version identification and pseudo-randomity. The UUIDv7 attribute will be used to ensure that the message it is on is unique. This attribute is named tx_id and will be a string .  In addition, as PIES is a versioned specification, it requires a declaration of which version it is compliant to. As the version value follows semver, this attribute is named version and will also be a string.  Message Kind​  PIES messages are categorized into different message types. These different kinds of messages will be structured to contain different fields and structures. This attribute is named kind and will also be a string. For example, the ProcessEventSetMessage data type would have kind set to &quot;ProcessEventSet&quot;. This attribute is necessary because there needs to be a clean way for parsing systems to quickly identify what kind of document is being transmitted. Inferring the message kind without this attribute could lead to errors in parsing and processing the message.  ","version":"Next","tagName":"h3"},{"title":"System Identification​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#system-identification","content":" PIES communication will require knowledge about which system or systems the messages are being emitted from. At this time, we do not yet know if there is a data/system registrar that will authoritatively act as our anchor. In the interim, we will address this by creating an attribute named system_id. This field may either be a string, or it may be an array of strings, should it be derived from multiple systems.  ","version":"Next","tagName":"h3"},{"title":"Record Identification​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#record-identification","content":" Finally, to ensure that the content is properly attributed to the right record in the system, we will have an attribute named record_id. This field will have a type of string, and will likely be representative of the primary key of the record in the source system. An associated record_kind will describe what kind of record it represents. This attribute will also be a string.  ","version":"Next","tagName":"h3"},{"title":"Security Considerations​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#security-considerations","content":" As with any messaging protocol, we need to factor in how we intend to cover the security of the message. This includes considerations for message confidentiality as well as integrity.  For most communication scenarios, PIES is intended for transfer between systems on a point-to-point basis. While there are future plans for potentially having a pub/sub model for message transfer, this will be out of scope in the interim. The best way for us to ensure point-to-point confidentiality is to make sure we are using standard protocols such as HTTPS/TLS connections, as this would be sufficient.  To potentially address future concerns of integrity in a pub/sub model, things such as the JSON Canonicalization Scheme (JCS) in RFC 8785 may be used to ensure that the PIES messages haven't been tampered with via some form of JWT/JOSE signing pattern. However, this will be out of scope for now and revisited when it becomes required.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Guidelines 📝","url":"/nr-pies/docs/spec/message/guidelines#references","content":" RFC 8785RFC 9562, section 5.7 ","version":"Next","tagName":"h2"},{"title":"Process Event Set 📝","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/message/process_event_set","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Process Event Set 📝","url":"/nr-pies/docs/spec/message/process_event_set#scope","content":" This message type is intended to represent a set of temporal events within a defined process. This will commonly be used for situations where acquiring a record's process history is required, such as for auditing, reporting or compliance purposes.  Note that this message type does not guarantee nor expect all known or related ProcessEvents to be present. It is possible for this message to only contain a subset of all known ProcessEvents.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Process Event Set 📝","url":"/nr-pies/docs/spec/message/process_event_set#structure","content":" A Process Event Set shall contain every standard message Header property, in addition to the following properties:  Name\tCardinality\tType\tDescription &amp; Constraintsprocess_event\t1..1\tProcessEvent\tA set of ProcessEvents. Represents a set of process concepts at a specific event in time.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Process Event Set 📝","url":"/nr-pies/docs/spec/message/process_event_set#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Process Event Set 📝","url":"/nr-pies/docs/spec/message/process_event_set#implementation-notes","content":" The Process Event Set message type is designed to act as an aggregation of ProcessEvents. Systems creating this message type should provide all known ProcessEvents associated to a record where possible. Recipient systems should not assume that the message will provide the full data horizon of all ProcessEvents. If he full data horizon is required, recipient systems must ensure that they request for any other relevant ProcessEventSets that may come from associated records.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Process Event Set 📝","url":"/nr-pies/docs/spec/message/process_event_set#references","content":" HeaderProcessEvent ","version":"Next","tagName":"h2"},{"title":"Project Bundle 🚧","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/data/project_bundle","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Project Bundle 🚧","url":"/nr-pies/docs/spec/data/project_bundle#scope","content":" This data type is intended to represent a grouping of related permits that are related to a specific activity.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Project Bundle 🚧","url":"/nr-pies/docs/spec/data/project_bundle#structure","content":" Name\tCardinality\tType\tDescription &amp; Constraintsproject_id\t1..1\tuuid\tA unique key to track all permits related to a project or activity across all permitting systems. project_name\t1..1\tstring\tShort name of the project. project_description\t0..1\tstring\tFull description of the project. This may contain information to better understand a project.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Project Bundle 🚧","url":"/nr-pies/docs/spec/data/project_bundle#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Project Bundle 🚧","url":"/nr-pies/docs/spec/data/project_bundle#implementation-notes","content":" TBD  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Project Bundle 🚧","url":"/nr-pies/docs/spec/data/project_bundle#references","content":" TBD ","version":"Next","tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/overview","content":"","keywords":"","version":"Next"},{"title":"Maturity​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#maturity","content":" The PIES specification is still actively being developed. While it has been developed to a point where it may be used for practical purposes, some areas of the specification will not be as fully defined or have not yet been tested. Refer to the following table for a description of each maturity level.  Maturity Level\tEmoji\tBadge\tDescriptionDeprecated\t⚠️ This artifact is no longer recommended for use and may be removed in a future release. Planning\t🚧 This artifact is still in the early stages, where brainstorming, research, and organization are taking place. It is not yet ready for use yet. Draft\t📝 This artifact has a preliminary structure and is being reviewed for accuracy, completeness, and usability. It could be used, but some areas may still need improvement and may have major changes over time. Trial\t🔬 This artifact has been developed to a point where it may be used for practical purposes. It may be used, but some areas may still need refinement and may have minor changes over time. Standard\tNone This artifact has been fully developed and has been ratified as a part of the standard. It can be used in production environments.  Each artifact in the specification may potentially be suffixed by an emoji indicating their maturity level. In addition, each artifact's page will also contain a maturity level badge.  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#hierarchy","content":" The PIES specification is organized into a hierarchy of artifacts, each with its own purpose and functionality. The following table provides an overview of the hierarchy:  Type Class\tDescriptionData\tRepresents core, atomic data structures and their inherent attributes or properties. Resource\tRepresents a composed or combined set of data types. The composition defines higher order relational concepts between the data types. Message\tRepresents a composition of resource and data types. Message types are normally used for API based communication between systems or applications.  ","version":"Next","tagName":"h2"},{"title":"Type Hierarchy​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#type-hierarchy","content":" The fundamental idea of the PIES hierarchy is that the fundamental data types can be grouped together into resources which explain more complex ideas or topics. The resources can then be used to create more complex resource types or messages. Messages will consist of a mixture of resource and/or data types, and the set of all types within their definition should create a cohesive chunk of information that can be used for interchange and communication purposes. The following diagram shows how these types are related to each other:    ","version":"Next","tagName":"h3"},{"title":"Formatting​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#formatting","content":" Every data standard must have a core set of fundamental data types that content will be transmitted in. Since the Permitting Interoperability Exchange Specification is built on top of the JSON Schemastandard, it will leverage the conventions specified in that standard, includingRFC 8259 which defines JSON. The PIES specification will be compliant to the draft 07 specification of the JSON Schema standard. While there exists more recent draft versions, notably thedraft 2020-12 standard, features that were introduced after draft 07 will not be defined and used at this time in order to maximize compatibility with implementor systems.  ","version":"Next","tagName":"h2"},{"title":"JSON Schema Primer​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#json-schema-primer","content":" A JSON Schema is commonly used to define, annotate and verify JSON structured documents and content. It serves as a way to explicitly define the structural expectations for a specific type of document. While JSON Schema is good for describing expected structures, describing conceptual relationships between related topics and domains  A JSON Schema will typically contain the following attributes:  $schema - This describes the draft level this JSON Schema complies to. For PIES, this property will normally be https://json-schema.org/draft-07/schema.$id - The unique URI for this schema. The path should ideally contain an obvious versioning nomenclature.$comment - A free text field for conveying out of band information about the schema. Comments are useful for specification readers and editors to understand further nuances for certain properties and structures, but should not be relied upon for implementation as they may be skipped over or stripped when parsed by machines.title - The intent of the schema. This should be brief and concise.description - A brief description about the schema. This should provide a quick overview for the context of usage.properties - A set of attributes that are expected to show up in this document type.required - An array defining the set of properties that must be present for the document to be considered valid. Anything defined that is not in this array is implied to be optional.type - The type primitive constraint for the property.  ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"Overview","url":"/nr-pies/docs/spec/overview#references","content":" Draft 07RFC 8259 (JSON)JSON Schema Version Comparison ","version":"Next","tagName":"h2"},{"title":"Record Linkage 🚧","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/message/record_linkage","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Record Linkage 🚧","url":"/nr-pies/docs/spec/message/record_linkage#scope","content":" This message type is intended to allow systems to assert that two records are related and should be linked However, this message only serves as an assertion; validation of the relationship between the records is left to the consuming system.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Record Linkage 🚧","url":"/nr-pies/docs/spec/message/record_linkage#structure","content":" A Process Event Set shall contain every standard message Header property, in addition to the following properties:  Name\tCardinality\tType\tDescription &amp; Constraintslinked_system_id\t1..*\tstring\tA valid URI that identifies the source system, service or asset that the linked data comes from. This URI should point to an authoritative asset tracking system or equivalent. However, the URI does not need to be machine readable. linked_record_id\t1..1\tstring\tThe record or primary key representing what record should be linked with the primary header record. linked_record_kind\t1..1\tstring\tThe kind of record the source system stores this linked record as (i.e. Permit, Project, Submission or Tracking).  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Record Linkage 🚧","url":"/nr-pies/docs/spec/message/record_linkage#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Record Linkage 🚧","url":"/nr-pies/docs/spec/message/record_linkage#implementation-notes","content":" The sole purpose of the Record Linkage message type is to define a specific link between two different records. This message may be used by the consuming system to either bind the different records together, or to use it as a way to remove a specific link between two specific records.  This message type should only specify one system_id; while the specification permits defining an unordered array of system ids, this is not recommended as it introduces ambiguity. If multiple links must be expressed, each link should have their own message.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Record Linkage 🚧","url":"/nr-pies/docs/spec/message/record_linkage#references","content":" Header ","version":"Next","tagName":"h2"},{"title":"Process Event 🔬","type":0,"sectionRef":"#","url":"/nr-pies/docs/spec/resource/process_event","content":"","keywords":"","version":"Next"},{"title":"Scope​","type":1,"pageTitle":"Process Event 🔬","url":"/nr-pies/docs/spec/resource/process_event#scope","content":" This data type is intended to represent an instance of a temporal event within a defined process.  Loosely taking inspiration from HL7 Timing.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Process Event 🔬","url":"/nr-pies/docs/spec/resource/process_event#structure","content":" Name\tCardinality\tType\tDescription &amp; Constraintsevent\t1..1\tEvent\tAn event concept. This attribute should solely describe the raw known factual information a specific temporal event. process\t1..1\tProcess\tAn process tracking concept. This attribute should represent the core concept of a defined process.  ","version":"Next","tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Process Event 🔬","url":"/nr-pies/docs/spec/resource/process_event#specification","content":" SchemaSourceExample Loading ....  ","version":"Next","tagName":"h2"},{"title":"Implementation Notes​","type":1,"pageTitle":"Process Event 🔬","url":"/nr-pies/docs/spec/resource/process_event#implementation-notes","content":" The Process Event type is designed to act as a container data type representing a cartesian product between theEvent and Process data types. Both data types are required in order to have a semantically coherent Process Event. Recipient systems will be able to associate a specific process happening at a defined time using this data type.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Process Event 🔬","url":"/nr-pies/docs/spec/resource/process_event#references","content":" EventProcess ","version":"Next","tagName":"h2"}],"options":{"enableHighlight":true,"id":"default"}}